version: 2.1

orbs:
  node: circleci/node@5.2.0

workflows:
  build-and-deploy:
    jobs:
      - build_image
      - sonarqube_scan
      - hold:
          type: approval
          requires:
            - build_image
      - deploy_image:
          requires:
            - hold

jobs:
  build_image:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          version: docker24
      - run:
          name: Build and Save Image
          command: |
            export DOCKER_BRANCH_NAME="$(echo $CIRCLE_BRANCH)"
            export DOCKER_BRANCH="$(echo $DOCKER_BRANCH_NAME | sed 's/\//-/g')"
            export DOCKER_IMAGE_NAME="ghcr.io/billchirico/$IMAGE_NAME:$(echo $DOCKER_BRANCH)"
            mkdir image
            docker image build --tag "$DOCKER_IMAGE_NAME" .
            docker image save -o "image/streamsentry${DOCKER_BRANCH}" "${DOCKER_IMAGE_NAME}"
      - persist_to_workspace:
          root: image/
          paths:
            - .

  deploy_image:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: docker24
      - run:
          name: Publish Image
          command: |
            export DOCKER_BRANCH="$(echo $CIRCLE_BRANCH | sed 's/\//-/g')"
            export DOCKER_IMAGE_NAME="ghcr.io/billchirico/$IMAGE_NAME:$(echo $DOCKER_BRANCH)"

            docker image load --input "streamsentry_${DOCKER_BRANCH}"
            docker login ghcr.io -u billchirico -p $ROOT_USER

            # echo Preparing Asphalt for shutdown
            # export API_SUBDOMAIN="$(echo $DOCKER_BRANCH)"
            # if [ "$API_SUBDOMAIN" = "development" ]; then API_SUBDOMAIN="staging.api.asphaltbot.com"; fi
            # if [ "$API_SUBDOMAIN" = "production" ]; then API_SUBDOMAIN="api.asphaltbot.com"; fi

            # if [ "$API_SUBDOMAIN" != "staging.api.asphaltbot.com" ] && [ "$API_SUBDOMAIN" != "api.asphaltbot.com" ]; then
            #     docker push $DOCKER_IMAGE_NAME
            #     exit 0
            # fi

            # if [ $"API_SUBDOMAIN" = "api.asphaltbot.com" ]; then
            #     curl --connect-timeout 180 --header "X-API-Key: xxxxxxxxxxxxxxxx" https://$(echo $API_SUBDOMAIN)/v1/Developer/ShutdownPrepare?reason=a%20new%20update%20is%20about%20to%20be%20released
            # fi

            docker push $DOCKER_IMAGE_NAME

  sonarqube_scan:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:8.0-alpine
    steps:
      - checkout
      - run:
          name: Install .NET Tool
          command: |
            apk update
            apk upgrade
            apk add ca-certificates
            update-ca-certificates
            apk add openjdk17
            dotnet tool install --global dotnet-sonarscanner
            dotnet nuget add source https://www.myget.org/F/discord-net/api/v3/index.json --name DiscordNet
            export PATH="$PATH:/root/.dotnet/tools"
            dotnet-sonarscanner begin /k:"BillChirico_StreamSentry-discord" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="188be1660109809ce5cee3e508d69ffe30db25b3" /o:"4f7cdcb9-07fe-4418-ab60-e7596679bbc3"
            dotnet build StreamSentry-discord/StreamSentry-discord.sln
            dotnet-sonarscanner end /d:sonar.login="188be1660109809ce5cee3e508d69ffe30db25b3"
